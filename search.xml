<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>linux文件压缩、解压、打包、解包命令总结</title>
    <url>/20210927182629/linux/linux%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9%E3%80%81%E8%A7%A3%E5%8E%8B%E3%80%81%E6%89%93%E5%8C%85%E3%80%81%E8%A7%A3%E5%8C%85%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="文件压缩、解压、打包、解包"><a href="#文件压缩、解压、打包、解包" class="headerlink" title="文件压缩、解压、打包、解包"></a>文件压缩、解压、打包、解包</h2><h3 id="zip压缩-unzip解压"><a href="#zip压缩-unzip解压" class="headerlink" title="zip压缩/unzip解压"></a>zip压缩/unzip解压</h3><pre><code>zip/unzip  [参数]  被压缩文件
</code></pre>
<p><strong>参数：</strong></p>
<pre><code>参数    含义
-r    压缩所有子目录
-d    解压
</code></pre>
<p><strong>命令</strong></p>
<pre><code># 压缩成zip文件(其中havorld.zip中的.zip可以省略，默认扩展名为zip)
zip -r havorld.zip ./havorld/*
# 解压zip文件到指定目录
unzip -d /home/havorld havorld.zip
</code></pre>
<p>注：zip既能压缩文件又能压缩目录</p>
<h3 id="gzip压缩-解压"><a href="#gzip压缩-解压" class="headerlink" title="gzip压缩/解压"></a>gzip压缩/解压</h3><p><strong>gzip使用格式：</strong></p>
<pre><code>gzip  [参数]  被压缩文件
</code></pre>
<p><strong>参数：</strong></p>
<pre><code>参数    含义
-r    压缩所有子目录
-d    解压
</code></pre>
<p><strong>命令</strong></p>
<pre><code>gzip havorld.txt # 压缩指定文件 ,生成havorld.txt.tar.gz
gzip -r havorld.tar havorld.tar.gz # 压缩文件
gzip havorld.tar # 压缩打包文件，生成havorld.tar.gz

gzip -d havorld.tar.gz # 解压文件
</code></pre>
<p>注：gzip只能压缩文件不能压缩目录</p>
<h3 id="打包-归档-解包-tar"><a href="#打包-归档-解包-tar" class="headerlink" title="打包(归档)/解包 tar"></a>打包(归档)/解包 tar</h3><ul>
<li>数据备份：把一系列文件打包到一个大文件中</li>
<li>恢复数据：把档案文件数据解包</li>
</ul>
<p><strong>tar使用格式：</strong></p>
<pre><code>tar [参数] 打包文件名 文件
</code></pre>
<p><strong>参数：</strong></p>
<pre><code>参数    含义
-c    生成档案文件，创建打包文件
-v    列出打包解档的详细过程，显示进度
-f    指定档案文件名称，f后面一定是.tar文件，所以必须放选项最后
-t    列出档案中包含的文件
-x    解开档案文件
</code></pre>
<p>注：参数前面的 “-“ 也加可不加</p>
<p><strong>命令：</strong></p>
<pre><code># 打包指定文件,生成.tar文件
tar -cvf havorld.tar havorld.txt meng.log
# 打包文件havorld目录下的所有文件,生成.tar文件
tar -cvf havorld.tar ./havorld*

# 解包.tar的文件
tar -xvf havorld.tar 
</code></pre>
<p><strong>注：tar只负责打包文件但不压缩，在tar命令中增加一个参数(-z)调用gzip实现打包+压缩的功能，其扩展名一般为.tar.gz</strong></p>
<pre><code># 打包+压缩指定文件,生成.tar.gz文件
tar -cvzf havorld.tar.gz havorld.txt meng.log
# 打包+压缩havorld目录下的所有文件,生成.tar.gz文件
tar -cvzf havorld.tar.gz ./havorld*

# 解压缩+解包.tar.gz的文件到指定目录
tar -zxvf havorld.tar.gz -C /home/havorld
</code></pre>
<h3 id="bzip2压缩-bunzip2解压"><a href="#bzip2压缩-bunzip2解压" class="headerlink" title="bzip2压缩/bunzip2解压"></a>bzip2压缩/bunzip2解压</h3><p>由于 bzip2 与 gzip 相比，其压缩稳定性和效果都更好，用法跟gzip一样</p>
<pre><code>bzip2 havorld.txt # 生成havorld.txt.bz2
bzip2 -k havorld.txt # 生成havorld.txt.bz2，并保留源文件

bunzip2 havorld.txt # 生成havorld.txt.bz2
bunzip2 -k havorld.txt # 生成havorld.txt.bz2，并保留源文件
</code></pre>
<p>tar与bzip2命令结合使用实现文件打包和压缩，其扩展名一般用xxxx.tar.gz2。 在tar命令中增加一个选项(-j)可以调用bzip2实现了一个压缩的功能，实行一个先打包后压缩的过程。</p>
<pre><code># 打包+压缩指定文件,生成.tar.gz文件
tar -jcvf havorld.tar.bz2 havorld.txt meng.log
# 打包+压缩havorld目录下的所有文件,生成.tar.gz文件
tar -jcvf havorld.tar.bz2 ./havorld*

# 解压缩+解包.tar.gz的文件到指定目录
tar -jxvf havorld.tar.bz2 -C /home/havorld
</code></pre>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>文件压缩</tag>
        <tag>文件解压</tag>
      </tags>
  </entry>
  <entry>
    <title>docker常用命令</title>
    <url>/20221127222839/git&amp;sql&amp;docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull tensorflow/serving #从仓库拉取镜像</span><br><span class="line">docker pull tensorflow/serving:latest-gpu #从仓库拉取GPU镜像</span><br><span class="line">docker pull tensorflow/serving:2.8.3-gpu #从仓库拉取GPU镜像</span><br><span class="line">docker run -it tensorflow/serving #进入到镜像中</span><br><span class="line">exit #退出镜像</span><br><span class="line">docker run tensorflow/serving #运行某个容器</span><br><span class="line">docker ps // 查看所有正在运行容器</span><br><span class="line">docker stop containerId // containerId 是容器的ID</span><br><span class="line"></span><br><span class="line">docker ps -a // 查看所有容器</span><br><span class="line">docker ps -a -q // 查看所有容器ID</span><br><span class="line"></span><br><span class="line">docker stop $(docker ps -a -q) //  stop停止所有容器</span><br><span class="line">docker rm $(docker ps -a -q) //   remove删除所有容器</span><br><span class="line">docker rm/rmi #删除容器/镜像</span><br><span class="line">docker cp local_files containerId:docker_files #本地文件复制到docker</span><br></pre></td></tr></table></figure>

<h1 id="tf-serving部署"><a href="#tf-serving部署" class="headerlink" title="tf-serving部署"></a>tf-serving部署</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-p: 指定主机到docker容器的端口映射</span><br><span class="line">--mount: 表示要进行挂载,其中</span><br><span class="line">	type=bind: 是选择挂载模式，</span><br><span class="line">	source: 要部署模型的存储路径，也就是挂载的源（必须是绝对路径），</span><br><span class="line">	target: 要挂载的目标位置，模型挂载到docker容器中的位置，也就是docker容器中的目录（放在集装箱的哪里）</span><br><span class="line">-t: 指定的是挂载到哪个容器</span><br><span class="line">-e: 环境变量 </span><br><span class="line">	MODEL_NAME: 必须与target指定路径的最后一个文件夹名称相同</span><br><span class="line">--per_process_gpu_memory_fraction: 运行时所需的GPU显存资源最大比率的值设定</span><br><span class="line"></span><br><span class="line">-v:</span><br><span class="line">	path1:path2 分别指模型在机器种储存的路径（必须是绝对路径），模型在容器中储存的路径（放在集装箱的哪里）</span><br></pre></td></tr></table></figure>




<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 8500:8500 \</span><br><span class="line">    --mount type=bind,source=/Users/coreyzhong/workspace/tensorflow/saved_model/,target=/models/test-model \</span><br><span class="line">    -t tensorflow/serving:1.15.0 \</span><br><span class="line">    -e MODEL_NAME=test-model --model_base_path=/models/test-model/ &amp;</span><br></pre></td></tr></table></figure>





<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">model_path=&quot;/Users/havorld/jupyter/model_save/&quot;</span><br><span class="line">docker run -t --rm -p 8500:8500 -p 8501:8501 \</span><br><span class="line">  -v &quot;$model_path/din:/models/tf_saved_models&quot; \</span><br><span class="line">  -e MODEL_NAME=tf_saved_models \</span><br><span class="line">  tensorflow/serving &amp;</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">查看TensorFlow-Serving状态： curl http://localhost:8501/v1/models/$&#123;model_name&#125;</span><br><span class="line">查看TensorFlow-Serving模型信息： curl http://localhost:8501/v1/models/$&#123;model_name&#125;/metadata</span><br><span class="line">查看模型信息: saved_model_cli show --dir=&#x27;./$&#123;model_path&#125;/20220422104620&#x27; --all</span><br><span class="line">使用Http请求进行模型预测： </span><br><span class="line">curl -d &#x27;&#123;&quot;instances&quot;: [1,2,3,4,5]&#125;&#x27; -X POST http://localhost:8501/v1/models/$&#123;model_name&#125;:predict</span><br><span class="line">其中instances的value为模型输入Tensor的字符串形式，矩阵维度需要和Tensor对应。</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -t --rm -p 8501:8501 \</span><br><span class="line">    -v &quot;/home/Personas/havorld/tfserving/tf_saved_models:/models/tf_saved_models&quot; \</span><br><span class="line">    -e MODEL_NAME=tf_saved_models \</span><br><span class="line">    tensorflow/serving</span><br><span class="line"></span><br><span class="line">docker run -t --rm -p 8501:8501 \</span><br><span class="line">-v &quot;/Users/haopeng.meng/jupyter/tf_saved_models:/models/tf_saved_models&quot; \</span><br><span class="line">-e MODEL_NAME=tf_saved_models \</span><br><span class="line">tensorflow/serving</span><br><span class="line"></span><br><span class="line">cat /opt/logs/rec-feed-api/access.log | grep &quot;feed recommend-&gt; uid:55&quot; | grep &quot;id=34174686&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo docker run -t --rm -p 8501:8501 -p 8500:8500 \</span><br><span class="line">    -v &quot;/home/meng.haopeng/tfserving/tf_saved_models:/models/tf_saved_models&quot; \</span><br><span class="line">    -e MODEL_NAME=tf_saved_models \</span><br><span class="line">    tensorflow/serving</span><br><span class="line"></span><br><span class="line">docker run -p 8501:8501 -p 8500:8500 \</span><br><span class="line">	--mount type=bind,source=/Users/haopeng.meng/jupyter/tf_saved_models,target=/models/tf_saved_models \</span><br><span class="line">	-e MODEL_NAME=tf_saved_models \</span><br><span class="line">	-t tensorflow/serving</span><br><span class="line"></span><br><span class="line">docker run -p 8500:8500 \</span><br><span class="line">      --mount type=bind,source=./intent/,target=/models/intent_score \</span><br><span class="line">      -e MODEL_NAME=intent_score -t tensorflow/serving:1.10.0</span><br><span class="line"></span><br><span class="line">docker run -p 8501:8501 -p 8500:8500 --mount type=bind,source=/my/model/path/m,target=/models/m -e MODEL_NAME=m -t tensorflow/serving:2.1.0</span><br><span class="line"></span><br><span class="line">sudo docker run -t --rm -p 8501:8501 -p 8500:8500 \</span><br><span class="line">    -v &quot;/home/meng.haopeng/tfserving/tf_saved_models:/models/tf_saved_models&quot; \</span><br><span class="line">    -e MODEL_NAME=tf_saved_models \</span><br><span class="line">    tensorflow/serving</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">docker run -t -p 443:8500 -p 8500:8501 -v <span class="string">&quot;/data/lsj/dmp/SavedModel/:/models/&quot;</span> tensorflow/serving --model_config_file=/models/models.config --model_config_file_poll_wait_seconds=300</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> run use container</span></span><br><span class="line">docker run -t -p 8501:8500 --name=tf_serving_multi_version_01 -v &quot;/data/tf-model/models/:/models/&quot; tensorflow/serving --model_config_file=/models/models.config --model_config_file_poll_wait_seconds=300 --allow_version_labels_for_unavailable_models=true --enable_batching=true --batching_parameters_file=/models/batch.config</span><br><span class="line"></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tf-serving部署</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -t --rm -p 8501:8501 \</span><br><span class="line">-v &quot;/Users/haopeng.meng/jupyter/tf_saved_models:/models/tf_saved_models&quot; \</span><br><span class="line">-e MODEL_NAME=tf_saved_models \</span><br><span class="line">tensorflow/serving</span><br><span class="line"></span><br><span class="line">docker run -p 8501:8501 -p 8500:8500 \</span><br><span class="line">	--mount type=bind,source=/Users/haopeng.meng/jupyter/tf_saved_models,target=/models/tf_saved_models \</span><br><span class="line">	-e MODEL_NAME=tf_saved_models \</span><br><span class="line">	-t tensorflow/serving</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">sudo docker run -t --rm -p 8501:8501 -p 8500:8500 \</span><br><span class="line">    -v &quot;/home/meng.haopeng/tfserving/tf_saved_models:/models/tf_saved_models&quot; \</span><br><span class="line">    -e MODEL_NAME=tf_saved_models \</span><br><span class="line">    tensorflow/serving</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo docker run --name feed -t --rm -p 8700:8500 -p 8701:8501 \</span><br><span class="line">    -v &quot;/home/meng.haopeng/tfserving/tf_saved_models:/models/tf_saved_models&quot; \</span><br><span class="line">    -e MODEL_NAME=tf_saved_models \</span><br><span class="line">    tensorflow/serving</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run --name feed -t --rm -p 8701:8501 -p 8700:8500 \</span><br><span class="line">	--mount type=bind,source=/home/Personas/havorld/tfserving/model_save,target=/models/model_save \</span><br><span class="line">	-e MODEL_NAME=model_save \</span><br><span class="line">	-t tensorflow/serving:latest-gpu </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run --name feed -t --rm -p 8700:8500 -p 8701:8501 \</span><br><span class="line">	--mount type=bind,source=/Users/haopeng.meng/Desktop/recommend/rec-alg-feed/model_save/din/serving/,target=/models/serving \</span><br><span class="line">	-e MODEL_NAME=serving \</span><br><span class="line">	-t tensorflow/serving</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">docker run --name feed -t --rm -p 8700:8500 -p 8701:8501 \</span><br><span class="line">        --mount type=bind,source=/Users/haopeng.meng/Desktop/recommend/serving/din/,target=/models/serving \</span><br><span class="line">        -e MODEL_NAME=serving \</span><br><span class="line">        -t tensorflow/serving</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>tfserving</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/20210928110535/git&amp;sql&amp;docker/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/username/project.github.io.git #拉取代码(master/main)</span><br><span class="line">git clone -b _dev https://github.com/username/project.github.io.git  #拉取分支(非master或main分支)</span><br><span class="line">git checkout --track origin/_remote  #获取指定的远程分支到本地</span><br><span class="line"></span><br><span class="line">git branch #查看本地分支</span><br><span class="line">git branch -a #查看远程分支</span><br><span class="line">git branch -vv#查看分支的绑定信息</span><br><span class="line"></span><br><span class="line">git branch _local #创建本地分支</span><br><span class="line">git branch -d _local #删除本地分支(当前分支不能停留在要删除的分支上)</span><br><span class="line">git checkout _local #切换到本地分支</span><br><span class="line">git checkout -b _local # 创建并切换到本地创建的分支</span><br><span class="line"></span><br><span class="line">git push --set-upstream origin _remote #创建远程分支</span><br><span class="line">git branch -r -d origin/_remote  #删除远程分支(记得push一下 git push origin _remote)</span><br><span class="line">git checkout -b _local origin/_remote #创建本地分支绑定远程分支</span><br><span class="line"></span><br><span class="line">git status #查看修改过代码的类</span><br><span class="line">git diff #查看修改的代码</span><br><span class="line"></span><br><span class="line">git add src/main/java/com/so/alg/RecommendServiceImpl.java #添加修改的代码</span><br><span class="line">git commit -m &quot;recommend feed modified&quot; #给修改的代码添加注释</span><br><span class="line">git pull origin _remote #从远程更新变动的代码</span><br><span class="line">git push origin _local:_remote #提交</span><br><span class="line"></span><br><span class="line">git merge _remote #合并分支到master上(需要先切换到master分支上,在执行合并)</span><br><span class="line"></span><br><span class="line">git tag -a 2020071801 -m &#x27;v2.0部署&#x27; #添加tag</span><br><span class="line">git show 2020071801 #展示tag</span><br><span class="line">git push --tags  #提交tag</span><br></pre></td></tr></table></figure>



<h2 id="git配置SSH公钥和私钥"><a href="#git配置SSH公钥和私钥" class="headerlink" title="git配置SSH公钥和私钥"></a>git配置SSH公钥和私钥</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.生成公钥和私钥(邮箱为github注册邮箱)</span></span><br><span class="line">ssh-keygen -t rsa -C &quot;xxxxxx@gmail.com&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.设置公钥私钥key的保存位置(可以直接确认则保存在默认位置)</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/username/.ssh/id_rsa):</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.输入、重复输入密钥盐值</span></span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.复制打印的公钥内容，并在github-&gt;Settings-&gt;SSH and GPG keys-&gt;New SSH Key中设置(title随意起)</span></span><br><span class="line">cat .ssh\id_rsa.pub</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.查看密钥是否配置成功(会提示输入盐值)</span></span><br><span class="line">ssh -T git@github.com</span><br><span class="line">Enter passphrase for key &#x27;/Users/username/.ssh/id_rsa&#x27;:</span><br><span class="line">Hi hicode360! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"><span class="meta">#</span><span class="bash"> 6.配置全局git信息</span></span><br><span class="line">git config --global user.name &quot;username&quot; # github用户名</span><br><span class="line">git config --global user.email  &quot;xxxxxx@gmail.com&quot; #github注册邮箱</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的数据类型</title>
    <url>/20221127221118/python/Python%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Python中的数据类型"><a href="#Python中的数据类型" class="headerlink" title="Python中的数据类型"></a>Python中的数据类型</h1><h2 id="可变数据类型"><a href="#可变数据类型" class="headerlink" title="可变数据类型"></a>可变数据类型</h2><p>对变量的值进行修改时，变量对应的内存地址不变，对应的值发生了改变，这种数据类型就称为可变数据类型。</p>
<h2 id="不可变数据类型"><a href="#不可变数据类型" class="headerlink" title="不可变数据类型"></a>不可变数据类型</h2><p>对变量的进行修改时，变量对应的内存地址发生了改变(变量指向了新的内存)，从而修改了变量的值，而变量对应的原内存的值并没有被改变，这种数据类型就称为可变数据类型。</p>
<p>也就是：不可变数据类型更改后地址发生改变，可变数据类型更改地址不发生改变</p>
<h2 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h2><table>
<thead>
<tr>
<th>数据类型</th>
<th>是否是可变数据类型</th>
<th>是否有序</th>
</tr>
</thead>
<tbody><tr>
<td>None (空)</td>
<td>不可变</td>
<td>-</td>
</tr>
<tr>
<td>int (整数)</td>
<td>不可变</td>
<td>-</td>
</tr>
<tr>
<td>float (浮点)</td>
<td>不可变</td>
<td>-</td>
</tr>
<tr>
<td>bool (布尔)</td>
<td>不可变</td>
<td>-</td>
</tr>
<tr>
<td>str (字符串)</td>
<td>不可变</td>
<td>-</td>
</tr>
<tr>
<td>tuple (元组)</td>
<td>不可变</td>
<td>序列类型，有序</td>
</tr>
<tr>
<td>list (列表)</td>
<td>可变</td>
<td>序列类型，有序</td>
</tr>
<tr>
<td>set (集合)</td>
<td>可变</td>
<td>序列类型，无序，不可重复</td>
</tr>
<tr>
<td>dict (字典)</td>
<td>可变</td>
<td>映射类型，v3.6及以后无有序, 前面版本无序</td>
</tr>
</tbody></table>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><table>
<thead>
<tr>
<th>数据类型</th>
<th>是否是可变数据类型</th>
<th>是否有序</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>bytes</td>
<td>不可变</td>
<td>-</td>
<td>定义字节：b’hello’,bytes(5)</td>
</tr>
<tr>
<td>bytearray</td>
<td>可变</td>
<td>-</td>
<td>定义字节数组：bytearray(b’hello’), bytearray(10)</td>
</tr>
<tr>
<td>complex (复数)</td>
<td>不可变</td>
<td>-</td>
<td>由一个实数和一个虚数组合构成，如：4+3j</td>
</tr>
<tr>
<td>frozenset (冻结的set)</td>
<td>不可变</td>
<td>无序</td>
<td>冻结的set初始化后不能再添加或删除元素</td>
</tr>
<tr>
<td>array (数组)</td>
<td>可变</td>
<td>有序</td>
<td>数组中的元素必须是同一类型</td>
</tr>
<tr>
<td>OrderedDict</td>
<td>可变</td>
<td>有序</td>
<td>key有序，setdefault取值key不存在也不报错</td>
</tr>
<tr>
<td>defaultdict</td>
<td>可变</td>
<td>有序</td>
<td>取值时Key不存在也不会抛出KeyError异常</td>
</tr>
<tr>
<td>deque</td>
<td>可变</td>
<td>有序</td>
<td>高效插入和删除的<strong>双向队列列表</strong></td>
</tr>
</tbody></table>
<h2 id="常见数据类型的操作和转换"><a href="#常见数据类型的操作和转换" class="headerlink" title="常见数据类型的操作和转换"></a>常见数据类型的操作和转换</h2><h3 id="list列表"><a href="#list列表" class="headerlink" title="list列表[ ]"></a>list列表[ ]</h3><p>list是**==可变==<strong>、</strong>==可重复==<strong>的</strong>==有序==**列表，里面的元素的数据类型也可以不同(也可以是另一个list)。list可根据索引号取其中的数据。</p>
<h4 id="list的生成"><a href="#list的生成" class="headerlink" title="list的生成"></a>list的生成</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list1: &quot;</span>, <span class="built_in">list</span>(list1)) <span class="comment"># 输出： list1:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line">list2 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list2: &quot;</span>, <span class="built_in">list</span>(list2))</span><br><span class="line">list3 = [i*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list3: &quot;</span>, <span class="built_in">list</span>(list3))</span><br><span class="line">list4 = (<span class="built_in">str</span>(i) + j <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">&quot;xyz&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list4: &quot;</span>, <span class="built_in">list</span>(list4))</span><br></pre></td></tr></table></figure>
<h4 id="list元素反转、排序和次数统计"><a href="#list元素反转、排序和次数统计" class="headerlink" title="list元素反转、排序和次数统计"></a>list元素反转、排序和次数统计</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">list1.reverse()  <span class="comment"># 元素顺序反转</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list reverse: &quot;</span>, list1)</span><br><span class="line">list1.sort(reverse=<span class="literal">False</span>)  <span class="comment"># 排序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list sort: &quot;</span>, list1)</span><br><span class="line">list1 = <span class="built_in">sorted</span>(list1, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list sort: &quot;</span>, list1)</span><br><span class="line">times = list1.count(<span class="number">5</span>)  <span class="comment"># 查看list中的元素出现的次数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;times: &quot;</span>, times)</span><br></pre></td></tr></table></figure>
<h4 id="list元素的添加、删除和取值"><a href="#list元素的添加、删除和取值" class="headerlink" title="list元素的添加、删除和取值"></a>list元素的添加、删除和取值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.append(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;append value: &quot;</span>, list1)  <span class="comment"># 添加元素</span></span><br><span class="line">list1.insert(<span class="number">1</span>, <span class="number">10</span>)  <span class="comment"># 在指定位置添加元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;insert value: &quot;</span>, list1)</span><br><span class="line">list1.remove(<span class="number">10</span>)  <span class="comment"># 删除指定value元素(第一个匹配的元素)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;remove value: &quot;</span>, list1)</span><br><span class="line">value = list1.pop(<span class="number">12</span>)  <span class="comment"># 删除指定index的元素并返回删除的值</span></span><br><span class="line">list1.pop()  <span class="comment"># 不指定index时默认删除最后一个元素</span></span><br><span class="line">list1.pop(-<span class="number">2</span>)  <span class="comment"># 删除倒数第二个元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;remove index: &quot;</span>, list1)</span><br><span class="line"></span><br><span class="line">index_value = list1.index(<span class="number">3</span>)  <span class="comment"># 查找第一个value为100的index值，如果不存在报TypeError异常</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;index_value: &quot;</span>, index_value)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line">index_value = list1.index(<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)  <span class="comment"># 指定范围，从第7(包括)个到第9(不包括)个元素之间查找value为5的index</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;index_value: &quot;</span>, index_value)</span><br></pre></td></tr></table></figure>
<h4 id="list添加多个元素、list的合并"><a href="#list添加多个元素、list的合并" class="headerlink" title="list添加多个元素、list的合并"></a>list添加多个元素、list的合并</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list2 = [<span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>]</span><br><span class="line"><span class="comment"># list1 = list1 + list2</span></span><br><span class="line">list1.extend(list2)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<h4 id="list的遍历"><a href="#list的遍历" class="headerlink" title="list的遍历"></a>list的遍历</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;value: %i&quot;</span> % value)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;index: %i, value: %i&quot;</span> % (index, list1[index]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;index: %i, value: %i&quot;</span> % (index, value))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1, <span class="number">100</span>):  <span class="comment"># index从100开始</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;index: %i, value: %i&quot;</span> % (index, value))</span><br></pre></td></tr></table></figure>

<h4 id="list中使用切片-slice-取值"><a href="#list中使用切片-slice-取值" class="headerlink" title="list中使用切片(slice)取值"></a>list中使用切片(slice)取值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">elements = list1[<span class="number">0</span>:<span class="number">3</span>]  <span class="comment"># 取第0到3条元素(包括头不包括尾)</span></span><br><span class="line"><span class="comment"># elements = list1[:3]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;slice elements: &quot;</span>, elements)</span><br><span class="line">elements = list1[<span class="number">1</span>:]  <span class="comment"># 取第1到最后一个元素(包括头也包括尾)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;slice elements: &quot;</span>, elements)</span><br><span class="line">elements = list1[-<span class="number">2</span>]  <span class="comment"># 取倒数第二条</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;slice elements: &quot;</span>, elements)</span><br><span class="line">elements = list1[<span class="number">4</span>:-<span class="number">2</span>]  <span class="comment"># 取第四条到倒数第二条(包括头不包括尾)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;slice elements: &quot;</span>, elements)</span><br><span class="line">elements = list1[<span class="number">0</span>:<span class="number">6</span>:<span class="number">2</span>]  <span class="comment"># 取第0条到第6条中每2个取一个</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;slice elements: &quot;</span>, elements)</span><br><span class="line">elements = list1[:]  <span class="comment"># 取所有元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;slice elements: &quot;</span>, elements)</span><br></pre></td></tr></table></figure>
<p><strong>==列表、元组和字符串==都可以使用切片进行操作</strong></p>
<h4 id="list的深copy和浅copy"><a href="#list的深copy和浅copy" class="headerlink" title="list的深copy和浅copy"></a>list的深copy和浅copy</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 浅拷贝只拷贝了引用，没有拷贝内容</span></span><br><span class="line">list2 = list1</span><br><span class="line">list2[<span class="number">1</span>] = <span class="number">1000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list1: &quot;</span>, list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list2: &quot;</span>, list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list1), <span class="built_in">id</span>(list2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 深拷贝是对于一个对象所有层次的拷贝(递归拷贝)</span></span><br><span class="line">list3 = list1.copy()</span><br><span class="line"><span class="comment"># import copy</span></span><br><span class="line"><span class="comment"># list3 = copy.copy(list1)</span></span><br><span class="line"><span class="comment"># list3 = copy.deepcopy(list1)</span></span><br><span class="line">list1[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list1: &quot;</span>, list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list3: &quot;</span>, list3)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list1), <span class="built_in">id</span>(list3))</span><br></pre></td></tr></table></figure>

<h3 id="set集合"><a href="#set集合" class="headerlink" title="set集合{ }"></a>set集合{ }</h3><p>set是**==可变==**、==<strong>不可重复</strong>==的==<strong>无序</strong>==列表。 ==<strong>set中不可以放入可变对象</strong>==，因为无法判断两个可变对象是否相等而去重。</p>
<h4 id="set的定义"><a href="#set的定义" class="headerlink" title="set的定义"></a>set的定义</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set0 = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;  <span class="comment"># 直接定义set集合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set0: &quot;</span>, set0)  <span class="comment"># 输出 set0:  &#123;0,1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"></span><br><span class="line">set1 = <span class="built_in">set</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])  <span class="comment"># 通过list定义set</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set1: &quot;</span>, set1)</span><br><span class="line"></span><br><span class="line">set2 = <span class="built_in">set</span>((<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>))  <span class="comment"># 通过tuple定义set</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set2: &quot;</span>, set2)</span><br><span class="line"></span><br><span class="line">set3 = <span class="built_in">set</span>(&#123;<span class="string">&quot;x&quot;</span>: <span class="number">2</span>, <span class="number">10</span>: <span class="string">&quot;b&quot;</span>&#125;)  <span class="comment"># 通过dict定义set</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set3: &quot;</span>, set3)  <span class="comment"># 输出 set3:  &#123;10, &#x27;x&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">my_list = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">set4 = <span class="built_in">set</span>(my_list)  <span class="comment"># set中不可以放入可变对象,然而为何放入list却不报错?</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set4: &quot;</span>, set4)  <span class="comment"># 输出 set4:  &#123;0, 1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由下面操作可以得出结论,set是先把list做遍历得到不可变的int对象类型后再放入set中</span></span><br><span class="line">my_list[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set4 with my_list changed: &quot;</span>, set4)  <span class="comment"># 输出 &#123;0, 1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"></span><br><span class="line">my_list.append([<span class="number">10</span>, <span class="number">20</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;my_list: &quot;</span>, my_list)</span><br><span class="line">set5 = <span class="built_in">set</span>(my_list)  <span class="comment"># 在list再放入list,此时将报错</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set5: &quot;</span>, set5)</span><br></pre></td></tr></table></figure>

<h4 id="set元素的添加、删除和取值"><a href="#set元素的添加、删除和取值" class="headerlink" title="set元素的添加、删除和取值"></a>set元素的添加、删除和取值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set0 = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set0: &quot;</span>, set0)</span><br><span class="line">set0.add(<span class="string">&quot;cn&quot;</span>)  <span class="comment"># 添加单个元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set0: &quot;</span>, set0)</span><br><span class="line"></span><br><span class="line">set0.update([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>])  <span class="comment"># 添加多个元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set0: &quot;</span>, set0)</span><br><span class="line"></span><br><span class="line">set0.add((<span class="string">&quot;com&quot;</span>, <span class="string">&quot;cn&quot;</span>))  <span class="comment"># 添加元组(元组是不可变数据类型)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set0: &quot;</span>, set0)</span><br><span class="line"><span class="comment"># set0.add([10, 20])  # 添加list报错,不能添加可变的数据类型(不能添加,但可以使用list创建set)</span></span><br><span class="line"><span class="comment"># set0.add(&#123;10, 20&#125;)  # 添加set报错,(可是使用不可变的frozenset添加:set0.add(frozenset(&#123;10, 20&#125;)))</span></span><br><span class="line"><span class="comment"># set0.add(&#123;&quot;x&quot;: 2, 10: &quot;b&quot;&#125;)  # 添加dict报错,不能添加可变的数据类型(不能添加,但可以使用dict创建set)</span></span><br><span class="line"></span><br><span class="line">set0.remove(<span class="string">&quot;cn&quot;</span>)  <span class="comment"># 根据值删除元素(set不能根据索引删除)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set0: &quot;</span>, set0)</span><br></pre></td></tr></table></figure>

<h4 id="set取并集和交集"><a href="#set取并集和交集" class="headerlink" title="set取并集和交集"></a>set取并集和交集</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">100</span>&#125;</span><br><span class="line">my_set = set0 | set1  <span class="comment"># 取并集</span></span><br><span class="line"><span class="built_in">print</span>(my_set)</span><br><span class="line">my_set = set0 &amp; set1  <span class="comment"># 取交集</span></span><br><span class="line"><span class="built_in">print</span>(my_set)</span><br></pre></td></tr></table></figure>

<h4 id="set遍历"><a href="#set遍历" class="headerlink" title="set遍历"></a>set遍历</h4><p>注：set的遍历同list</p>
<h3 id="dict字典"><a href="#dict字典" class="headerlink" title="dict字典{ }"></a>dict字典{ }</h3><p>dict是**==无序==<strong>，key==<strong>不可重复</strong>==、</strong>==不可变==**内容以key-value键值对形式存在的映射</p>
<p><strong>dict中的key只能是不可变对象且唯一</strong>, 一个key对应一个value，多次对一个key设置value，后面的值会把前面的冲掉。</p>
<blockquote>
<p>dict一般用在需要高速查找的很多地方。dict的key必须是不可变对象，这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这种通过key计算位置的算法称为哈希算法（Hash）。要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list、set是可变的，所以就不能作为key。</p>
</blockquote>
<h4 id="dict的创建和增删改查"><a href="#dict的创建和增删改查" class="headerlink" title="dict的创建和增删改查"></a>dict的创建和增删改查</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;addr&quot;</span>: <span class="string">&quot;北京&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>, <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;女&quot;</span>&#125;</span><br><span class="line">dict1[<span class="string">&quot;height&quot;</span>] = <span class="number">1.77</span>  <span class="comment"># 添加元素</span></span><br><span class="line">dict1.pop(<span class="string">&quot;age&quot;</span>)  <span class="comment"># 删除元素输出</span></span><br><span class="line">item_del = dict1.popitem()  <span class="comment"># 产出dict中的最后一个item并返回</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;item_del: &quot;</span>, item_del)</span><br><span class="line">dict1[<span class="string">&quot;addr&quot;</span>] = <span class="string">&quot;深圳&quot;</span>  <span class="comment"># 修改元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dict1: &quot;</span>, dict1)</span><br><span class="line"></span><br><span class="line">keys = dict1.keys()  <span class="comment"># 获取dict的所有key</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;keys: &quot;</span>, keys)  <span class="comment"># dict_keys([&#x27;add&#x27;, &#x27;height&#x27;])</span></span><br><span class="line">addr = dict1.get(<span class="string">&quot;addr&quot;</span>)  <span class="comment"># 根据key获取value,若key不存在报异常(defaultdict字典不报异常)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;addr: &quot;</span>, addr)</span><br><span class="line">addr = dict1.setdefault(<span class="string">&quot;addr&quot;</span>)  <span class="comment"># 根据key获取value,若key不存返回None,也可设置默认返回值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;addr: &quot;</span>, addr)</span><br><span class="line">name = dict1.get(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;unknow&quot;</span>)  <span class="comment"># 根据key获取value,若key不存返回默认值&#x27;unknow&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name: &quot;</span>, name)</span><br></pre></td></tr></table></figure>

<h4 id="dict的遍历"><a href="#dict的遍历" class="headerlink" title="dict的遍历"></a>dict的遍历</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dict的遍历</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dict1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;key: %s, value: %s&quot;</span> % (key, dict1[key]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dict1.values():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;value: &quot;</span>, value)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict1.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;key: %s, value: %s&quot;</span> % (key, value))</span><br></pre></td></tr></table></figure>

<h4 id="dict的合并"><a href="#dict的合并" class="headerlink" title="dict的合并"></a>dict的合并</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict2 = &#123;<span class="string">&quot;mobel&quot;</span>: <span class="number">15888888888</span>, <span class="string">&quot;postal_code&quot;</span>: <span class="number">10000</span>&#125;  <span class="comment"># 合并两个dict</span></span><br><span class="line">dict1.update(dict2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dict1: &quot;</span>, dict1)</span><br></pre></td></tr></table></figure>

<h4 id="dict和list的异同"><a href="#dict和list的异同" class="headerlink" title="dict和list的异同"></a>dict和list的异同</h4><blockquote>
<p><strong>list</strong>查找和插入的时间随着元素的增加而增加；<br>占用空间小，浪费内存很少</p>
</blockquote>
<blockquote>
<p><strong>dict</strong>查找和插入的速度极快，不会随着key的增加而变慢；<br>需要占用大量的内存，内存浪费多。<br>所以，dict是用空间来换取时间的一种方法。</p>
</blockquote>
<h4 id="dict的排序"><a href="#dict的排序" class="headerlink" title="dict的排序"></a>dict的排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dict排序</span></span><br><span class="line">dict3 = &#123;<span class="string">&#x27;sh&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;hz&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;tj&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;bj&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;gz&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;sz&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;wh&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认排序，并仅返回key</span></span><br><span class="line">key_rank1 = <span class="built_in">sorted</span>(dict3.keys(), reverse=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;key_rank1: &quot;</span>, key_rank1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认排序(以key来排序)，并返回key和value</span></span><br><span class="line">dict_key_rank1 = <span class="built_in">sorted</span>(dict3.items(), reverse=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dict_key_rank1: &quot;</span>, <span class="built_in">dict</span>(dict_key_rank1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以key排序</span></span><br><span class="line">dict_key_rank2 = <span class="built_in">sorted</span>(dict3.items(), key=<span class="keyword">lambda</span> item: item[<span class="number">0</span>], reverse=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dict_key_rank2: &quot;</span>, <span class="built_in">dict</span>(dict_key_rank2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以value排序</span></span><br><span class="line">dict_value_rank1 = <span class="built_in">sorted</span>(dict3.items(), key=<span class="keyword">lambda</span> item: item[<span class="number">1</span>], reverse=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dict_value_rank1: &quot;</span>, <span class="built_in">dict</span>(dict_value_rank1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以value排序</span></span><br><span class="line">dict4 = &#123;<span class="string">&#x27;上海&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;杭州&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;天津&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;北京&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;广州&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;深圳&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;武汉&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line">dict_value_rank2 = <span class="built_in">sorted</span>(dict4.items(), key=<span class="keyword">lambda</span> item: item[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dict_value_rank2: &quot;</span>, <span class="built_in">dict</span>(dict_value_rank2))</span><br></pre></td></tr></table></figure>



<h3 id="tuple元组"><a href="#tuple元组" class="headerlink" title="tuple元组( )"></a>tuple元组( )</h3><p>tuple是**==不可变==<strong>、</strong>==有序==**的列表，所以一般在定义tuple时就进行初始化赋值。</p>
<p>注意：</p>
<ul>
<li><p>在定义只有一个元素的tuple时其元素后面要加逗号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple0 = ()  <span class="comment"># 创建空元祖</span></span><br><span class="line">tuple0 = (<span class="number">1</span>)  <span class="comment"># 不是tuple，会当成括号处理</span></span><br><span class="line">tuple0 = (<span class="number">1</span>,)  <span class="comment"># 正确的tuple</span></span><br></pre></td></tr></table></figure></li>
<li><p>tuple虽然不可变但tuple中的元素对象却是可变的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>]</span><br><span class="line">tuple1 = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, my_list)  <span class="comment"># tuple包含list,list变化时,tuple1也就跟着变化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;tuple1: &quot;</span>, tuple1)  <span class="comment"># tuple1:  (&#x27;a&#x27;, &#x27;b&#x27;, [&#x27;x&#x27;, &#x27;y&#x27;])</span></span><br><span class="line">my_list.append(<span class="string">&quot;z&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;tuple1 with my_list changed: &quot;</span>, tuple1)  <span class="comment"># tuple1变为(&#x27;a&#x27;, &#x27;b&#x27;, [&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;])</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="tuple的创建"><a href="#tuple的创建" class="headerlink" title="tuple的创建"></a>tuple的创建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple2 = (<span class="number">1</span>, <span class="string">&quot;good&quot;</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;good&quot;</span>, <span class="literal">True</span>)  <span class="comment"># 创建元组,里面的元素类型可以不同</span></span><br><span class="line">tuple3 = (<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, *tuple2, <span class="number">4</span>, <span class="number">5</span>)  <span class="comment"># 元组引用另一个数组中的所有元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;tuple3: &quot;</span>, tuple3)</span><br></pre></td></tr></table></figure>

<h4 id="tuple中元素的增删改查"><a href="#tuple中元素的增删改查" class="headerlink" title="tuple中元素的增删改查"></a>tuple中元素的增删改查</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">element = tuple2[<span class="number">4</span>]  <span class="comment"># 根据索引获取元组中的元素</span></span><br><span class="line">element = tuple2[-<span class="number">2</span>]  <span class="comment"># 使用索引获取元组中的元素</span></span><br><span class="line">index = tuple2.index(<span class="string">&quot;good&quot;</span>)  <span class="comment"># 获取第一个匹配给定值的index值</span></span><br><span class="line"><span class="keyword">del</span> tuple2  <span class="comment"># 删除元组</span></span><br><span class="line"><span class="comment"># tuple2[4] = &quot;well&quot; # 修改元组的元素,报错</span></span><br><span class="line"></span><br><span class="line">tuple4 = (<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="number">4</span>, <span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;tuple4: &quot;</span>, tuple4)</span><br><span class="line"><span class="comment"># tuple4[-1] = [10, 20, 30] #报错</span></span><br><span class="line">tuple4[-<span class="number">1</span>][<span class="number">0</span>] = <span class="number">100</span>  <span class="comment"># 可以通过修改元组中的list,从而改变元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;tuple4: &quot;</span>, tuple4) <span class="comment"># tuple4:  (&#x27;a&#x27;, &#x27;b&#x27;, 4, 5, [100, 7, 8])</span></span><br></pre></td></tr></table></figure>

<h4 id="tuple的遍历"><a href="#tuple的遍历" class="headerlink" title="tuple的遍历"></a>tuple的遍历</h4><p>注：tuple的遍历同list</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据类型</tag>
      </tags>
  </entry>
</search>
